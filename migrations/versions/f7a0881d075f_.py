"""empty message

Revision ID: f7a0881d075f
Revises: 
Create Date: 2024-11-20 23:46:20.082899

"""
from alembic import op
import sqlalchemy as sa

import os
environment = os.getenv("FLASK_ENV")
SCHEMA = os.environ.get("SCHEMA", "public")

# revision identifiers, used by Alembic.
revision = 'f7a0881d075f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if environment == "production":
        op.execute(f"CREATE SCHEMA IF NOT EXISTS {SCHEMA};")
        
    op.create_table('tags',
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema=SCHEMA if environment == "production" else None
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=24), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('_hashed_password', sa.String(length=255), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('bank_debt', sa.Integer(), nullable=False),
    sa.Column('base_buying_power', sa.Float(), nullable=False),
    sa.Column('total_net_worth', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username'),
    schema=SCHEMA if environment == "production" else None
    )
    op.create_table('leaderboard',
    sa.Column('net_worth', sa.Float(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], [f'{SCHEMA}.users.id' if environment == "production" else 'users.id']),
    sa.PrimaryKeyConstraint('id'),
    schema=SCHEMA if environment == "production" else None
    )
    op.create_table('stocks',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('symbol', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('price', sa.Float(), nullable=False),
    sa.Column('initial_price', sa.Float(), nullable=False), 
    sa.Column('total_shares', sa.Integer(), nullable=False),
    sa.Column('remaining_shares', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['tag_id'], [f'{SCHEMA}.tags.id' if environment == "production" else 'tags.id']),
    sa.PrimaryKeyConstraint('id'),
    schema=SCHEMA if environment == "production" else None
    )
    op.create_table('orders',
    sa.Column('order_type', sa.String(), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('limit_price', sa.Float(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('stock_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['stock_id'], [f'{SCHEMA}.stocks.id' if environment == "production" else 'stocks.id']),
    sa.ForeignKeyConstraint(['user_id'], [f'{SCHEMA}.users.id' if environment == "production" else 'users.id']),
    sa.PrimaryKeyConstraint('id'),
    schema=SCHEMA if environment == "production" else None
    )
    op.create_table('saves',
    sa.Column('target_price', sa.Float(), nullable=False),
    sa.Column('alert_type', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('stock_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['stock_id'], [f'{SCHEMA}.stocks.id' if environment == "production" else 'stocks.id']),
    sa.ForeignKeyConstraint(['user_id'], [f'{SCHEMA}.users.id' if environment == "production" else 'users.id']),
    sa.PrimaryKeyConstraint('id'),
    schema=SCHEMA if environment == "production" else None
    )
    op.create_table('transactions',
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('total_price', sa.Float(), nullable=False),
    sa.Column('transaction_price', sa.Float(), nullable=False),
    sa.Column('transaction_type', sa.String(), nullable=False),
    sa.Column('limit_price', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('stock_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['stock_id'], [f'{SCHEMA}.stocks.id' if environment == "production" else 'stocks.id']),
    sa.ForeignKeyConstraint(['user_id'], [f'{SCHEMA}.users.id' if environment == "production" else 'users.id']),
    sa.PrimaryKeyConstraint('id'),
    schema=SCHEMA if environment == "production" else None
    )
    op.create_table('user_shares',
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('average_price', sa.Float(), nullable=False),
    sa.Column('stock_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['stock_id'], [f'{SCHEMA}.stocks.id' if environment == "production" else 'stocks.id']),
    sa.ForeignKeyConstraint(['user_id'], [f'{SCHEMA}.users.id' if environment == "production" else 'users.id']),
    sa.PrimaryKeyConstraint('id'),
    schema=SCHEMA if environment == "production" else None
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    if environment == "production":
        op.drop_table('user_shares', schema=SCHEMA)
        op.drop_table('transactions', schema=SCHEMA)
        op.drop_table('saves', schema=SCHEMA)
        op.drop_table('orders', schema=SCHEMA)
        op.drop_table('stocks', schema=SCHEMA)
        op.drop_table('leaderboard', schema=SCHEMA)
        op.drop_table('users', schema=SCHEMA)
        op.drop_table('tags', schema=SCHEMA)
    else:
        op.drop_table('user_shares')
        op.drop_table('transactions')
        op.drop_table('saves')
        op.drop_table('orders')
        op.drop_table('stocks')
        op.drop_table('leaderboard')
        op.drop_table('users')
        op.drop_table('tags')
    # ### end Alembic commands ###